## Import necessary libraries
import pandas as pd
import yfinance as yf
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings

## Suppress future warnings for cleaner output
warnings.filterwarnings("ignore", category=FutureWarning)

## ---------------------------------------------
## Function to create a dual-axis graph for stock price and revenue
## ---------------------------------------------
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(
        rows=2, cols=1, shared_xaxes=True,
        subplot_titles=("Historical Share Price", "Historical Revenue"),
        vertical_spacing=0.3
    )

    ## Filter data to match the dashboard's time range
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']

    ## Add stock price trace
    fig.add_trace(
        go.Scatter(
            x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True),
            y=stock_data_specific.Close.astype("float"),
            name="Share Price"
        ),
        row=1, col=1
    )

    ## Add revenue trace
    fig.add_trace(
        go.Scatter(
            x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True),
            y=revenue_data_specific.Revenue.astype("float"),
            name="Revenue"
        ),
        row=2, col=1
    )

    ## Customize axes and layout
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(
        showlegend=False,
        height=900,
        title=stock,
        xaxis_rangeslider_visible=True
    )

    fig.show()

## ---------------------------------------------
## Extract Tesla Stock Data using yfinance
## ---------------------------------------------
tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True)

## ---------------------------------------------
## Extract Tesla Revenue Data using web scraping
## ---------------------------------------------
url_tesla = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.html"
html_data_tesla = requests.get(url_tesla).text
soup_tesla = BeautifulSoup(html_data_tesla, "html.parser")

## Locate the Tesla revenue table
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
table_tesla = soup_tesla.find_all("tbody")[1]

## Loop through rows and extract Tesla revenue data
for row in table_tesla.find_all("tr"):
    cols = row.find_all("td")
    if len(cols) == 2:
        date = cols[0].text.strip()
        revenue = cols[1].text.strip()
        new_row = pd.DataFrame([{"Date": date, "Revenue": revenue}])
        tesla_revenue = pd.concat([tesla_revenue, new_row], ignore_index=True)

## Clean Tesla revenue data
tesla_revenue["Revenue"] = tesla_revenue["Revenue"].str.replace(',|\$', "", regex=True)
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue["Revenue"] != ""]

## ---------------------------------------------
## Extract GameStop Stock Data using yfinance
## ---------------------------------------------
gme = yf.Ticker("GME")
gme_data = gme.history(period="max")
gme_data.reset_index(inplace=True)

## ---------------------------------------------
## Extract GameStop Revenue Data using web scraping
## ---------------------------------------------
url_gme = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data_gme = requests.get(url_gme).text
soup_gme = BeautifulSoup(html_data_gme, "html.parser")

## Locate the GameStop revenue table
gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])
table_gme = soup_gme.find_all("tbody")[1]

## Loop through rows and extract GameStop revenue data
for row in table_gme.find_all("tr"):
    cols = row.find_all("td")
    if len(cols) == 2:
        date = cols[0].text.strip()
        revenue = cols[1].text.strip()
        new_row = pd.DataFrame([{"Date": date, "Revenue": revenue}])
        gme_revenue = pd.concat([gme_revenue, new_row], ignore_index=True)

## Clean GameStop revenue data
gme_revenue["Revenue"] = gme_revenue["Revenue"].str.replace(',|\$', "", regex=True)
gme_revenue.dropna(inplace=True)
gme_revenue = gme_revenue[gme_revenue["Revenue"] != ""]

## ---------------------------------------------
## Plot the graphs using make_graph function
## ---------------------------------------------
make_graph(tesla_data, tesla_revenue, "Tesla Stock and Revenue Overview")
make_graph(gme_data, gme_revenue, "GameStop Stock and Revenue Overview")
